/*
 * AnyPay
 *
 * This the AnyPay service targeted towards, parents with children doing payments and russian oligarks
 *
 * API version: 1.0.0
 * Contact: per.von.rosen@swedbank.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/gin-gonic/gin"
	openapi "github.com/pvr1/anypay/go"
)

func TestAddAccount(t *testing.T) {
	type args struct {
		c *gin.Context
	}
	tests := []struct {
		name string
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			openapi.AddAccount(tt.args.c)
		})
	}
}

func performRequest(r http.Handler, method, path string) *httptest.ResponseRecorder {
	req := httptest.NewRequest(method, path, nil)
	w := httptest.NewRecorder()
	r.ServeHTTP(w, req)
	return w
}

/*
func TestEngineHandleContext(t *testing.T) {
	r := gin.New()
	r.GET("/", func(c *gin.Context) {
		c.Request.URL.Path = "/anypay/v1/accounts"
		r.HandleContext(c)
	})
	v2 := r.Group("/v2")
	{
		v2.GET("/", func(c *gin.Context) {})
	}

	assert.NotPanics(t, func() {
		w := performRequest(r, "GET", "/anypay/v1/transactions")
		t.Log(w.Result().Body())
		assert.Equal(t, 301, w.Code)
	})
}
*/

func TestGetAccount(t *testing.T) {
	type args struct {
		c *gin.Context
	}
	tests := []struct {
		name string
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			openapi.GetAccount(tt.args.c)
		})
	}
}

func TestGetAccounts(t *testing.T) {
	type args struct {
		c *gin.Context
	}
	tests := []struct {
		name string
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			openapi.GetAccounts(tt.args.c)
		})
	}
}

func TestUpdateAccount(t *testing.T) {
	type args struct {
		c *gin.Context
	}
	tests := []struct {
		name string
		args args
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			openapi.UpdateAccount(tt.args.c)
		})
	}
}
